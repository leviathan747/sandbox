//! ACTIVITY BEGIN. '4c7a8b2a-de96-4c6a-b4aa-e701b0fdc83c' 'a2f8af9e-cfb1-49de-b6d0-d78c26b7dfec' DO NOT EDIT THIS LINE.
state ALU::Display.displaying_memory_value () is
begin
  // reset the display
  this.clearDisplay();
  // display the value in memory
  disp~>result( (this->R3.Memory).value );
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4c7a8b2a-de96-4c6a-b4aa-e701b0fdc83c' '19b97cd7-f3e2-4881-9268-04e248a553b5' DO NOT EDIT THIS LINE.
state ALU::Display.toggling_sign ( key : in integer ) is
begin
  // -
  if ( 11 = key ) then
    // toggle the sign
    this.sign := -1;
  // .
  elsif ( 15 = key ) then
    generate Display.point( key ) to this;
  // numbers 0-9
  elsif ( 0 <= key and key <= 9 ) then
    generate Display.digit( key ) to this;
  else
    generate Display.error( "Invalid key press" ) to this;
  end if;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4c7a8b2a-de96-4c6a-b4aa-e701b0fdc83c' 'f29c45fb-a7c7-473f-840a-40a6755ea77a' DO NOT EDIT THIS LINE.
state ALU::Display.receiving_whole_part ( key : in integer ) is
mem : instance of Memory;
op : instance of Operation;
begin
  // .
  if ( 15 = key ) then
    generate Display.point( key ) to this;
  // numbers 0-9
  elsif ( 0 <= key and key <= 9 ) then
    // add to the whole part
    if ( 0 = this.whole_part ) then
      this.whole_part := integer(key);
    else
      this.whole_part := key + this.whole_part * 10;
    end if;
    this.value := this.sign * ( real(this.whole_part) + this.fractional_part );
    // display the new value
    disp~>result( this.value );
  // +, -, *, /, =
  elsif ( 10 <= key and key <= 14) then
    generate Display.operator( key ) to this;
  else
    generate Display.error( "invalid key press" ) to this;
  end if;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4c7a8b2a-de96-4c6a-b4aa-e701b0fdc83c' '5b21f70e-b8ad-4c1a-a413-c3bb98162552' DO NOT EDIT THIS LINE.
state ALU::Display.receiving_fractional_part ( key : in integer ) is
begin
  // .
  if ( 15 = key ) then
    // ignore
  // numbers 0-9
  elsif ( 0 <= key and key <= 9 ) then
    // add to the fractional part
    this.fractional_part := this.fractional_part + ( key / 10.0 );
    this.value := this.sign * ( real(this.whole_part) + this.fractional_part );
    // display the new value
    disp~>result( this.value );
  // +, -, *, /, =
  elsif ( 10 <= key and key <= 14 ) then
    generate Display.operator( key ) to this;
  else
    generate Display.error( "invalid key press" ) to this;
  end if;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4c7a8b2a-de96-4c6a-b4aa-e701b0fdc83c' 'd69dbd78-8842-49f6-b607-55beb1dcc618' DO NOT EDIT THIS LINE.
state ALU::Display.evaluating ( key : in integer ) is
begin
  // evaluate with the last saved operation
  (this->R3.Operation).op := (this->R1.Calculator).current_op;
  (this->R3.Operation).evaluate();
  // store the operation for the next evaluation
  (this->R1.Calculator).current_op := key;
  // reset the display
  generate Display.reset() to this;
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

//! ACTIVITY BEGIN. '4c7a8b2a-de96-4c6a-b4aa-e701b0fdc83c' '04c12b1a-0fd5-43ca-a152-03fba6e67776' DO NOT EDIT THIS LINE.
state ALU::Display.displaying_error ( message : in string ) is
begin
  // send the error to the display
  disp~>error( message );
end state;
//! ACTIVITY END. DO NOT EDIT THIS LINE.

